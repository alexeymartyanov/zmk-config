/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>; // List of keys on the right side of the keyboard
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41>; // List of keys on the left side of the keyboard
            hold-trigger-on-release;
        };

        htap: htap {
            compatible = "zmk,behavior-hold-tap";
            label = "HTAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  ;  | BSPC |
            // | CTRL |  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  O  |  '   |
            // | SHFT |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q        &kp W            &kp F         &kp P          &kp B           &kp J        &kp L         &kp U         &kp Y               &kp SEMI      &kp BSPC
&kp LCTRL  &hml LGUI A  &hml LEFT_ALT R  &hml LSHFT S  &hml LCTRL T   &kp G           &kp M        &hmr RCTRL N  &hmr RSHFT E  &hmr RIGHT_ALT I    &hmr RMETA O  &kp SQT
&kp LSHFT  &kp Z        &kp X            &kp C         &kp D          &kp V           &kp K        &kp H         &kp COMMA     &htap COLON PERIOD  &kp FSLH      &kp ESC
                                         &kp LGUI      &kp BACKSPACE  &lt 1 DELETE    &lt 2 ENTER  &kp SPACE     &mo 3
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE  &kp LS(N1)     &kp LS(N2)  &kp LS(N3)            &kp LS(N4)             &kp LS(N5)       &kp LS(N6)  &kp LS(N7)  &kp LS(N8)      &kp LS(N9)  &kp LS(N0)  &kp BSPC
&kp LCTRL   &kp GRAVE      &trans      &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PAGE_UP      &kp GRAVE   &kp DOWN    &kp UP          &kp RIGHT   &trans      &kp DELETE
&kp LSHFT   &kp LS(GRAVE)  &trans      &kp LS(LEFT_BRACKET)  &kp LS(RIGHT_BRACKET)  &kp PAGE_DOWN    &kp TILDE   &kp HOME    &kp DOWN_ARROW  &kp END     &trans      &trans
                                       &kp LGUI              &trans                 &kp SPACE        &kp RET     &trans      &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL         &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &kp KP_NUMBER_0  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &trans       &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &kp KP_NUMLOCK   &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans       &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                                             &kp LGUI         &trans           &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };

        layer_3 {
            bindings = <
&trans  &kp F9  &kp F10  &kp F11  &kp F12  &kp PRINTSCREEN    &trans        &trans        &trans        &trans        &trans        &trans
&none   &kp F5  &kp F6   &kp F7   &kp F8   &trans             &trans        &trans        &trans        &trans        &trans        &trans
&trans  &kp F1  &kp F2   &kp F3   &kp F4   &trans             &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
                         &trans   &trans   &trans             &trans        &trans        &trans
            >;
        };
    };
};
